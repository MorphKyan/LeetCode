/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
// 哈希表保证不会死循环，只复制一遍
class Solution {
public:
    unordered_map<Node*,Node*> visited;
    Node* cloneGraph(Node* node) {
        if(node==nullptr){
            return node;
        }

        if(visited.find(node)!=visited.end()){
            return visited[node];
        }

        Node* cloneNode=new Node(node->val);
        visited[node]=cloneNode;

        for(auto& neighbors: node->neighbors){
            cloneNode->neighbors.emplace_back(cloneGraph(neighbors));
        }
        return cloneNode;
    }
};
