// 背包问题dp
//  dp[i][j] 表示从数组的[0,i][0,i]下标范围内选取若干个正整数（可以是0个），是否存在一种选取方案使得被选取的正整数的和等于j
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        // <2没法分
        if(n<2) return false;
        int sum=accumulate(nums.begin(),nums.end(),0);
        int maxNum=*max_element(nums.begin(),nums.end());
        // 和是奇数没法分
        if(sum%2==1) return false;
        int target=sum/2;
        // 有一个数比一半都大没法分
        if(maxNum>target) return false;

        vector<vector<int>> dp(n,vector<int>(target+1,0));
        for(int i=0;i<n;++i){
            dp[i][0]=true;
        }
        dp[0][nums[0]]=true;
        for(int i=1;i<n;++i){
            int num=nums[i];
            for(int j=1;j<=target;++j){
                if(j>=num){
                    dp[i][j]=dp[i-1][j]|dp[i-1][j-num];
                }
                // 不选
                else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[n-1][target];
    }
};
