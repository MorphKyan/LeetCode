/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/
// bfs 一层层赋值
class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return NULL;
        queue<Node*> q;
        q.push(root);
        while(!q.empty()){
            // 进队
            int size=q.size();
            Node* pre=NULL;
            for(int i=0;i<size;++i){
                Node* tmp=q.front();
                if(tmp->left) q.push(tmp->left);
                if(tmp->right) q.push(tmp->right);
                q.pop();
                // 赋值next
                if(pre&&pre!=tmp){
                    pre->next=tmp;
                }
                pre=tmp;
            }
        }
        return root;
    }
};

// 把bfs简化 利用上一层的next指针，免去队列的使用
class Solution {
public:
    void helper(Node* &last,Node* &p,Node* &nextStart){
        if(last){
            last->next=p;
        }
        if(!nextStart){
            nextStart=p;
        }
        last=p;
    }
    Node* connect(Node* root) {
        if(!root) return NULL;
        Node* cur=root;
        while(cur){
            Node *last=NULL,*nextStart=NULL; // nextStart记录下一层开始的位置
            for(Node *p=cur;p!=NULL;p=p->next){
                if(p->left) helper(last,p->left,nextStart);
                if(p->right) helper(last,p->right,nextStart);
            }
            cur=nextStart;
        }
        return root;
    }
};
