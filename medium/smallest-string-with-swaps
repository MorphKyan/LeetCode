// 并查集模板
class Djset{
public:
    vector<int> parent;
    vector<int> rank;

    Djset(int n){
        for(int i=0;i<n;++i){
            parent.emplace_back(i);
            rank.emplace_back(0);
        }
    }

    // 顺便压缩路径
    int find(int x){
        if(parent[x]!=x){
            parent[x]=find(parent[x]);
        }
        return parent[x];
    }

    void merge(int x,int y){
        int rx=find(x);
        int ry=find(y);
        if(rx!=ry){
            if(rank[rx]<rank[ry]){
                swap(rx,ry);
            }
            parent[ry]=rx;
            if(rank[rx]==rank[ry]) rank[rx]++;
        }
    }
};

class Solution {
public:
    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {
        int n=s.size();
        Djset set(n);
        for(vector<int>& v:pairs){
            set.merge(v[0],v[1]);
        }

        unordered_map<int,vector<int>> map;
        for(int i=0;i<n;++i){
            map[set.find(i)].emplace_back(s[i]);
        }

        for(auto& [x,vec]:map){
            sort(vec.begin(),vec.end(),greater<int>()); // 由大到小
        }

        for(int i=0;i<n;++i){
            int x=set.find(i);
            s[i]=map[x].back();
            map[x].pop_back();
        }
        return s;
    }
};
