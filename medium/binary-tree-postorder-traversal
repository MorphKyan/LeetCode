/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// 迭代后序遍历
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if(!root) return ans; 
        stack<TreeNode*> stk;
        TreeNode* pre=nullptr;
        while(root!=nullptr||!stk.empty()){
            while(root){
                stk.emplace(root);
                root=root->left;
            }
            root=stk.top();
            stk.pop();
            // 此时root->left绝对为nullptr
            if(root->right==nullptr||root->right==pre){
                ans.emplace_back(root->val);
                pre=root;
                root=nullptr; // 下次进入最外层循环的时候，因为root为nullptr就会给root赋值为stk.top()了，不用这里赋值
            }
            else{
                stk.emplace(root);
                root=root->right;
            }
        }
        return ans;
    }
};
