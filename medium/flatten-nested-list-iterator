/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
// 因为借鉴的思路是list的 而我这个是vector 所以头插慢死了
class NestedIterator {
private:
    vector<NestedInteger> list;
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        list=nestedList;
    }
    
    int next() {
        int ans=list[0].getInteger();
        list.erase(list.begin());
        return ans;
    }
    
    bool hasNext() {
        while(!list.empty()&&!list[0].isInteger()){
            vector<NestedInteger> first=list[0].getList();
            list.erase(list.begin());
            for(int i=first.size()-1;i>=0;--i){
                list.insert(list.begin(),first[i]);
            }
        }
        return !list.empty();
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
