// 感觉还挺麻烦的dp
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.empty()) return 0;
        int n=prices.size();
        // dp[i][0] i-1天已经持有股票或今天买的且i-1天不处于冷冻期属于状态2
        // dp[i][1] 今天卖了明天冻结 的累计最大收益
        // dp[i][2] 明天不冻结没股票，今天也没买的累积最大收益（包含今天冻结i-1卖的用dp[i-1][1]/今天不冻结i-1就没拿着用dp[i-1][2]
        vector<vector<int>> dp(n,vector<int>(3));
        dp[0][0]=-prices[0]; // 第1天直接买了
        for(int i=1;i<n;++i){
            dp[i][0]=max(dp[i-1][0],dp[i-1][2]-prices[i]);
            dp[i][1]=dp[i-1][0]+prices[i];
            dp[i][2]=max(dp[i-1][1],dp[i-1][2]);
        }
        return max(dp[n-1][1],dp[n-1][2]); // 最后一天还没有卖掉没有意义，所以没有dp[n-1][0]
    }
};
