// 从边界开始广度优先搜索
class Solution {
public:
    const int dx[4]={1,-1,0,0};
    const int dy[4]={0,0,1,-1};

    void solve(vector<vector<char>>& board) {
        int n=board.size();
        if(n==0){
            return;
        }
        int m=board[0].size();
        queue<pair<int,int>> q;
        // 把边上的都放进队列，一会儿遍历
        for(int i=0;i<n;++i){
            if(board[i][0]=='O'){
                q.emplace(i,0);
            }
            if(board[i][m-1]=='O'){
                q.emplace(i,m-1);
            }
        }
        for(int i=1;i<m-1;++i){
            if(board[0][i]=='O'){
                q.emplace(0,i);
            }
            if(board[n-1][i]=='O'){
                q.emplace(n-1,i);
            }
        }
        // 连着的都标记成A
        while(!q.empty()){
            int x=q.front().first,y=q.front().second;
            q.pop();
            // A作为标记
            board[x][y]='A';
            for(int i=0;i<4;++i){
                int nx=x+dx[i],ny=y+dy[i];
                if(nx<0||nx>=n||ny<0||ny>=m||board[nx][ny]!='O') continue;
                q.emplace(nx,ny);
            }
        }
        // 重新遍历把A换成O，其他都为X
        for(int i=0;i<n;++i){
            for(int j=0;j<m;++j){
                if(board[i][j]=='A') board[i][j]='O';
                else if(board[i][j]=='O') board[i][j]='X';
            }
        }
    }
};
