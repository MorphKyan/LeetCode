class Solution {
public:
    string reorganizeString(string S) {
        // 统计数量
        unordered_map<int,int> map;
        for(char& c:S){
            ++map[c];
        }
        // 根据频率排序
        vector<pair<int,int>> count(map.begin(),map.end());
        sort(count.begin(),count.end(),[](const pair<int,int>& u,const pair<int,int>& v){
            return u.second>v.second;
        });
        // 看是否超出限制
        if(2*count[0].second-1>S.size()) return "";
        // 从奇数位 按出现频次填充
        string ans(S);
        int idx=0;
        for(int i=0;i<count.size();++i){ // 这里用count.size()是因为有可能有的字母没有出现过，要注意一下
            while(count[i].second){
                ans[idx]=count[i].first;
                idx+=2;
                if(idx>=S.size()) idx=1; // 奇数位插满了从偶数位插入
                --count[i].second;
            }
        }
        return ans;
    }
};
