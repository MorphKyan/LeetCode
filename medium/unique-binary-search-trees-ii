// 递归生成二叉搜索树
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTree(int start,int end){
        if(start>end) return {nullptr};

        vector<TreeNode*> allTrees;
        for(int i=start;i<=end;++i){
            vector<TreeNode*> leftTrees=generateTree(start,i-1);
            vector<TreeNode*> rightTrees=generateTree(i+1,end);
            for(TreeNode*& left:leftTrees){
                for(TreeNode*& right:rightTrees){
                    TreeNode* t=new TreeNode(i);
                    t->left=left;
                    t->right=right;
                    allTrees.emplace_back(t);
                }
            }
        }
        return allTrees;
    }

    vector<TreeNode*> generateTrees(int n) {
        if(!n) return {};
        return generateTree(1,n);
    }

};
