class Solution {
public:
    int minIncrementForUnique1(vector<int>& A) {
        sort(A.begin(),A.end());
        int count=0;
        for(int i=1;i<A.size();++i){
            if(A[i]<=A[i-1]){
                count+=A[i-1]-A[i]+1;
                A[i]=A[i-1]+1;
            }
        }
        return count;
    }

// 计数排序
    int minIncrementForUnique2(vector<int>& A){
        int count[40000]={0};
        int max_num=0;
        for(int a:A){
            ++count[a];
            max_num=max(max_num,a);
        }
        // 原理和一个一个加一样，这样能批次加
        int res=0;
        for(int i=0;i<max_num;++i){
            if(count[i]>1){
                res+=count[i]-1;
                count[i+1]+=count[i]-1;
            }
        }
        // 最大的那个特殊处理，可能超出40000边界，也更快
        if(count[max_num]>1){
            // 等差求和
            res+=count[max_num]*(count[max_num]-1)/2;
        }
        return res;
    }

// 线性探测寻址，类似解决hash碰撞，加路径压缩
    int minIncrementForUnique(vector<int>& A){
        int pos[80000];
        memset(pos,-1,sizeof(pos));
        int res=0;
        for(int a:A){
            int b=findPos(pos,a);
            res+=b-a;
        }
        return res;
    }

    int findPos(int (&pos)[80000],int a){
        if(pos[a]==-1){
            pos[a]=a;
            return a;
        }
        // 路径压缩，向后寻找
        pos[a]=findPos(pos,pos[a]+1);
        return pos[a];
    }
};
