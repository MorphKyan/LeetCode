// 动态规划dp[i]=dp[j] && check(s[j..i−1])
// dp[j]存储了0~j的分割是否合法
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        // 单词哈希表
        unordered_set<string> wordDictSet;
        for(string word:wordDict){
            wordDictSet.insert(word);
        }

        int size=s.size();
        vector<bool> dp(size+1);
        dp[0]=true;
        // 0的位置是边界，有效赋值从1开始
        for(int i=1;i<=size;++i){
            for(int j=0;j<i;++j){
                if(dp[j]&&wordDictSet.find(s.substr(j,i-j))!=wordDictSet.end()){
                    dp[i]=true;
                    break;
                }
            }
        }
        return dp[size];
    }
};
