// 字典树 倒序
class Trie {
public:
    Trie* next[26] = {nullptr};
    bool isEnd;
    
    Trie() {
        isEnd = false;
    }

    void insert(string s) {
        Trie* curPos = this;

        for (int i = s.length() - 1; i >= 0; --i) {
            int t = s[i] - 'a';
            if (curPos->next[t] == nullptr) {
                curPos->next[t] = new Trie();
            }
            curPos = curPos->next[t];
        }
        curPos->isEnd = true;
    }
};

class Solution {
public:
    int respace(vector<string>& dictionary, string sentence) {
        int n=sentence.size();

        // 生成字典树
        Trie* root = new Trie();
        for (auto& word:dictionary) {
            root->insert(word);
        }

        vector<int> dp(n+1,INT_MAX);
        dp[0]=0;
        for(int i=1;i<=n;++i){
            dp[i]=dp[i-1]+1;
            
            Trie* curPos=root;
            // 从后往前找
            for(int j=i;j>=1;--j){
                int t=sentence[j-1]-'a';
                // 不匹配这个单词，直接跳出
                if(curPos->next[t]==nullptr){
                    break;
                }
                // 这个单词到结尾了
                else if(curPos->next[t]->isEnd){
                    dp[i]=min(dp[i],dp[j-1]);
                }
                // 如果到dp[i] 为止完全匹配，则不再寻找匹配，直接跳出匹配循环
                if (dp[i] == 0) {
                    break;
                }
                curPos=curPos->next[t];
            }
        }
        return dp[n];
    }
};
