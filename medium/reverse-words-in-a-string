class Solution {
public:
    string reverseWords(string s) {
        if(s.size()==0) return s;
        string res;
        string tmp;
        bool flag=true;
        for(int i=s.length()-1;i>=0;--i){
            if(s[i]==' '&&flag){
                continue;
            }
            if(s[i]==' '&&!flag){
                reverse(tmp.begin(),tmp.end());
                res+=tmp+' ';
                tmp.clear();
                flag=true;
                continue;
            }
            flag=false;
            tmp+=s[i];
        }
        if(tmp.size()){
            reverse(tmp.begin(),tmp.end());
            res+=tmp;
        }
        if(res.length()&&res[res.length()-1]==' ') res=res.substr(0, res.length()-1);
        return res;
    }
};

// 一次遍历无额外空间
class Solution {
public:
    string reverseWords(string s) {
        // 反转整个字符串
        reverse(s.begin(), s.end());

        int n = s.size();
        int idx = 0;
        for (int start = 0; start < n; ++start) {
            if (s[start] != ' ') {
                // 填一个空白字符然后将idx移动到下一个单词的开头位置
                if (idx != 0) s[idx++] = ' ';

                // 循环遍历至单词的末尾
                int end = start;
                while (end < n && s[end] != ' ') s[idx++] = s[end++];

                // 反转整个单词
                reverse(s.begin() + idx - (end - start), s.begin() + idx);

                // 更新start，去找下一个单词
                start = end;
            }
        }
        s.erase(s.begin() + idx, s.end());
        return s;
    }
};

// 还有Python等的API战士方法
class Solution:
    def reverseWords(self, s: str) -> str:
        return " ".join(reversed(s.split()))
        
