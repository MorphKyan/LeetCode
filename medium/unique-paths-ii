// dp 每个格子只能由上或左过来
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid[0][0]==1) return 0;
        int m=obstacleGrid.size(),n=obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,0));
        dp[0][0]=1;
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                // 如果是初始化过的dp[0][0]就跳过
                if(i==0&&j==0) continue;
                if(obstacleGrid[i][j]==0){
                    dp[i][j]=(i-1>=0? dp[i-1][j]:0)+(j-1>=0? dp[i][j-1]:0);
                }
                else dp[i][j]=0;
            }
        }
        return dp[m-1][n-1];
    }
};

// 把dp数组压缩成一行了，因为只与左和上有关
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid[0][0]==1) return 0;
        int m=obstacleGrid.size(),n=obstacleGrid[0].size();
        vector<int> dp(n);
        dp[0]=1;
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if(obstacleGrid[i][j]==0){
                    dp[j]+=j-1>=0? dp[j-1]:0;
                }
                else dp[j]=0;
            }
        }
        return dp[n-1];
    }
};
