// 一位一位乘法
class Solution {
public:
    string addStrings(string& num1, string& num2) { // 这里不用引用内存消耗大一些
        int m=num1.size()-1,n=num2.size()-1;
        int carry=0;
        string ans="";
        while(m>=0||n>=0||carry!=0){
            int x=m>=0? num1[m]-'0':0;
            int y=n>=0? num2[n]-'0':0;
            int result=x+y+carry;
            ans.push_back('0'+result%10);
            carry=result/10;
            --m;--n;
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }

    string multiply(string num1, string num2) {
        if (num1=="0"||num2=="0"){
            return "0";
        }
        int m=num1.size(),n=num2.size()-1;
        string ans="0";
        // 从乘数低位开始往上乘
        while(n>=0){
            string tmp="";
            int mul=num2[n]-'0';
            int carry=0;
            for(int i=m-1;i>=0;--i){
                int x=(num1[i]-'0')*mul+carry;
                carry=x/10;
                tmp+=x%10+'0';
                //std::cout<<carry<<" "<<tmp<<" ";
            }
            if(carry!=0) tmp+=carry+'0';
            // 结果反转
            reverse(tmp.begin(),tmp.end());
            // 根据乘数是第几位，末尾加0，相当于乘好多次10
            for(int i=0;i<num2.size()-n-1;++i){
                tmp+='0';
            }
            //std::cout<<tmp<<" ";
            ans=addStrings(ans,tmp);
            --n;
        }
        return ans;
    }
};
