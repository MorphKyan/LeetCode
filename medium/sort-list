/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
// 自底向上合并 空间复杂度O(1) 自顶向下 空间复杂度O(lon n)
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head==nullptr) return head;
        // 统计长度
        int len=0;
        ListNode* tmp=head;
        while(tmp){
            ++len;
            tmp=tmp->next;
        }
        // subLen=1的子链
        ListNode* dummyHead=new ListNode(0,head);
        for(int subLen=1;subLen<len;subLen*=2){
            ListNode* pre=dummyHead, *cur=dummyHead->next;
            while(cur){
                // 切第一个表
                ListNode* head1=cur;
                for(int i=1;i<subLen&&cur->next;++i){
                    cur=cur->next;
                }
                // 切第二个表
                ListNode* head2=cur->next;
                cur->next=nullptr;
                cur=head2;
                for(int i=1;i<subLen&&cur;++i){
                    cur=cur->next;
                }
                // 断开
                ListNode* next=nullptr;
                if(cur){
                    next=cur->next;
                    cur->next=nullptr;
                }
                // 合并
                ListNode* merged=mergeTwoLists(head1,head2);
                pre->next=merged;
                // 找尾
                while(pre->next){
                    pre=pre->next;
                }
                // 记录结尾位置 下次连接
                cur=next;
            }
        }
        return dummyHead->next;
    }

// 21
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode *ret=new ListNode(-1);
        ListNode *head=ret;
        while(l1!=NULL&&l2!=NULL){
            if(l1->val<=l2->val){
                ret->next=l1;
                l1=l1->next;
            }
            else{
                ret->next=l2;
                l2=l2->next;
            }
            ret=ret->next;
        }
        if(l1!=NULL){
            ret->next=l1;
        }
        if(l2!=NULL){
            ret->next=l2;
        }
        return head->next;
    }
};
