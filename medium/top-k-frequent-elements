// hash+小顶堆
class Solution {
public:
    static bool cmp(pair<int,int>& m,pair<int,int>& n){
        return m.second>n.second;
    }

    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> cnt;
        // 统计频次
        for(int& i:nums){
            ++cnt[i];
        }

        // 小顶堆，优化后大小小于k
        priority_queue<pair<int,int>,vector<pair<int,int>>,decltype(&cmp)> heap(cmp);
        for(auto& [num,count]:cnt){
            if(heap.size()==k){
                if(heap.top().second<count){
                    heap.pop();
                    heap.emplace(num,count);
                }
            }
            else{
                heap.emplace(num,count);
            }
        }

        //返回k个结果
        vector<int> ans;
        while(!heap.empty()){
            ans.emplace_back(heap.top().first);
            heap.pop();
        }
        return ans;
    }
};
