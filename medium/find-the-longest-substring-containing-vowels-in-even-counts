// 前缀思想，再把5个状态压缩到五位二进制数中
class Solution {
public:
    int findTheLongestSubstring(string s) {
        // status保存遍历到此点i时前面的奇偶状态
        int ans=0,status=0,n=s.size();
        // 一共32(1<<5)种状态，保存各状态之中最早达到要求的i
        vector<int> pos(1<<5,INT_MAX);
        // 全为0，也就是aeiou全是偶数的状态第一次出现定义在-1
        // 这样保证ans=max(ans,i-pos[status])时结果正确
        pos[0]=-1;
        for(int i=0;i<n;++i){
            if(s[i]=='a'){
                status^=1<<0;
            }
            else if(s[i]=='e'){
                status^=1<<1;
            }
            else if(s[i]=='i'){
                status^=1<<2;
            }
            else if(s[i]=='o'){
                status^=1<<3;
            }
            else if(s[i]=='u'){
                status^=1<<4;
            }
            // 如果pos[status]==INT_MAX说明前面没有出现过这种状态
            if(pos[status]==INT_MAX){ // 官方题解中要注意~-1其实是0，所以是判断是否=-1。注意if只要不是0全都是true！！！
                pos[status]=i;
            }
            else{
                ans=max(ans,i-pos[status]);
            }
        }
        std::cout<<pos[0];
        return ans;
    }
};

/*
关于官方题解为什么pos[status]存储的是i + 1 而不是i？
为了保证第一个字母是辅音字母时也可以输出正确的值，因为如果改为 pos[status] = i; 那相应的if语句要改为ans = max(ans, i - pos[status]);，这样当第一个字母为辅音时，status = 0,~pos[status]判为真，ans就会被赋值为0，这显然不是正确的。同时题解中是用pos[status]是不是等于-1来判断前面是否出现过与status相同的奇偶性，所以也不能初始化为pos[0] = -1。就只好多加一个1；
*/
