// 动态规划
class Solution {
public:
    int videoStitching(vector<vector<int>>& clips, int T) {
        vector<int> dp(T+1,INT_MAX-1); //防止+1溢出
        dp[0]=0;
        for(int i=0;i<=T;++i){
            for(auto& it:clips){
                if(it[0]<i&&it[1]>=i){ //片段覆盖了i
                    dp[i]=min(dp[i],dp[it[0]]+1);
                }
            }
        }
        return dp[T]==INT_MAX-1? -1:dp[T];
    }
};

// 贪心
class Solution {
public:
    int videoStitching(vector<vector<int>>& clips, int T) {
        vector<int> maxn(T); //最右
        int last=0,ret=0,pre=0;
        for(vector<int>& it:clips){
            if(it[0]<T){ // 记录每个片段的能到的最右
                maxn[it[0]]=max(maxn[it[0]],it[1]);
            }
        }
        for(int i=0;i<T;++i){
            last=max(last,maxn[i]);
            if(i==last){
                return -1;
            }
            if(i==pre){
                ++ret;
                pre=last;
            }
        }
        return ret;
    }
};
