// 改进二分
class Solution {
public:
    // lower表示是否包含等于 形成左右逼近的效果
    int bSearch(vector<int>& nums,int target,bool lower){
        int n=nums.size();
        int l=0,r=n-1,ans=n;
        while(l<=r){
            int mid=(l+r)>>1;
            if(nums[mid]>target||(lower&&nums[mid]>=target)){
                r=mid-1;
                ans=mid;
            }else{
                l=mid+1;
            }
        }
        return ans;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        int left=bSearch(nums,target,true);
        int right=bSearch(nums,target,false)-1;
        if(left<=right&&right<nums.size()&&nums[left]==target&&nums[right]==target){
            return vector<int>{left,right};
        }
        return vector<int>{-1,-1};
    }
};

// 大傻子二分，复杂度还是O(n)
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int l=0,r=n-1;
        vector<int> ans(2,-1);
        while(l<=r){
            int mid=(l+r)>>1;
            if(nums[mid]==target){
                l=r=mid;
                while(l>=0&&nums[l]==target){
                    --l;
                }
                ans[0]=l+1;
                while(r<n&&nums[r]==target){
                    ++r;
                }
                ans[1]=r-1;
                break;
            }
            else if(nums[mid]<target){
                l=mid+1;
            }
            else{
                r=mid-1;
            }
        }
        return ans;
    }
};
