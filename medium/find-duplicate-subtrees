/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// 序列化对比 hash表
class Solution {
public:
    unordered_map<string,int> map;
    vector<TreeNode*> ans;

    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        helper(root);
        return ans;
    }

    string helper(TreeNode* root){
        if(root==nullptr) return "#";
        string left=helper(root->left);
        string right=helper(root->right);

        string res=left+","+right+","+to_string(root->val);
        int feq=map[res];
        if(feq==1){
            ans.push_back(root);
        }
        map[res]++;
        return res;
    }
};
