// 前缀和+二分查找
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        int ans=INT_MAX;
        vector<int> sums(n+1,0);

        // 前缀和
        for(int i=1;i<=n;++i){
            sums[i]=sums[i-1]+nums[i-1];
        }

        // 二分查找
        for(int i=1;i<=n;++i){
            int target=s+sums[i-1];
            auto bound=lower_bound(sums.begin(),sums.end(),target);
            if(bound!=sums.end()){
                ans=min(ans,(int)((bound-sums.begin())-i+1)); // 长度
            }
        }
        return ans==INT_MAX? 0:ans;
    }
};

// 双指针，夹着中间的长度，不够大++end，够大--start
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        int ans=INT_MAX;
        int start=0,end=0;
        int sum=0;
        // 扩end
        while(end<n){
            // 现在的sum
            sum+=nums[end];
            // 缩start
            while(sum>=s){
                ans=min(ans,end-start+1);
                sum-=nums[start];
                ++start;
            }
            ++end;
        }
        return ans==INT_MAX? 0:ans;
    }
};
