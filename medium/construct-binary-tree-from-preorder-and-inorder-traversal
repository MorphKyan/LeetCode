/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
// 递归写法 迭代写法还挺巧妙的，可以看官方题解
class Solution {
private:
    unordered_map<int,int> index;

public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        // 构建map
        int n=preorder.size();
        for(int i=0;i<n;++i){
            index[inorder[i]]=i;
        }
        return build(preorder,inorder,0,n-1,0,n-1);
    }

    TreeNode* build(vector<int>& preorder,vector<int>& inorder,int preorder_l,int preorder_r,int inorder_l,int inorder_r){
        if(preorder_l>preorder_r) return nullptr;
        TreeNode* root=new TreeNode(preorder[preorder_l]);
        int mid=-1;
        /*
        for(int i=inorder_l;i<=inorder_r;++i){
            if(inorder[i]==preorder[preorder_l]){
                mid=i;
                break;
            }
        }*/
        // 使用map加速
        mid=index[preorder[preorder_l]];
        root->left=build(preorder,inorder,preorder_l+1,preorder_l+mid-inorder_l,inorder_l,mid-1);
        root->right=build(preorder,inorder,preorder_l+mid-inorder_l+1,preorder_r,mid+1,inorder_r);
        return root;
    }
};
