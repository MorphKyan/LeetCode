/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * class MountainArray {
 *   public:
 *     int get(int index);
 *     int length();
 * };
 */

class Solution {
public:
    int findInMountainArray(int target, MountainArray &mountainArr) {
        // 找山峰
        int l=0,r=mountainArr.length()-1,mid,peak;
        while(l<=r){
            mid=(l+r)/2;
            if(l==r) break;
            if(mountainArr.get(mid)<mountainArr.get(mid+1)) l=mid+1;
            else r=mid;
        }
        peak=mid;

        // 左边找
        l=0,r=peak;
        while(l<=r){
            mid=(l+r)/2;
            int tmp=mountainArr.get(mid);
            if(tmp==target) return mid;
            if(target<tmp) r=mid-1;
            else l=mid+1;
        }

        // 右边找
        l=peak+1,r=mountainArr.length()-1;
        while(l<=r){
            mid=(l+r)/2;
            int tmp=mountainArr.get(mid);
            if(tmp==target) return mid;
            if(target<tmp) l=mid+1;
            else r=mid-1;

        }

        // 没找到
        return -1;
    }
};

// 下面这种方法对升序降序都好用，降序通过*-1转换为升序
int bisect(MountainArray* mountainArr, int left, int right, int target, int reverse) {
    /* 这里使用官方小技巧，一个reverse变量搞定升序降序，当升序 reverse=1,否则 reverse=-1*/
    target *= reverse;  // 全部转为升序查找
    while (left <= right) {
        int mid = left + (right - left) / 2;
        int res = reverse * get(mountainArr, mid);
        if (res == target) {
            return mid;
        } else if (res < target) {
            left = mid + 1;
        } else right = mid - 1;
    }
    return -1;
}

// 此外，找山峰那块因为必有山峰，所以可以简化成如下
while(l<r){
    mid=(l+r)/2;
    if(mountainArr.get(mid)<mountainArr.get(mid+1)) l=mid+1;
    else r=mid;
}
peak=l; //l或r都行
