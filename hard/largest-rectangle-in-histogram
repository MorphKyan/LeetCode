// 单调栈 保存左右边界
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int size=heights.size();
        stack<int> stk;
        vector<int> left(size),right(size,size);
        
        for(int i=0;i<size;++i){
            while(!stk.empty()&&heights[stk.top()]>=heights[i]){
                right[stk.top()]=i;
                stk.pop();
            }
            left[i]=stk.empty()? -1:stk.top();
            stk.push(i);
        }
        int ans=0;
        for(int i=0;i<size;++i){
            ans=max(ans,(right[i]-left[i]-1)*heights[i]);
        }
        return ans;
    }
};

// 单调栈 一遍遍历
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        vector<int> tmp;
        tmp.emplace_back(0);
        tmp.insert(tmp.end(),heights.begin(),heights.end());
        tmp.emplace_back(0);
        int size=tmp.size();
        stack<int> stk;
        int ans=0;
        
        for(int i=0;i<size;++i){
            while(!stk.empty()&&tmp[stk.top()]>tmp[i]){
                int h=tmp[stk.top()];
                stk.pop();
                ans=max((i-stk.top()-1)*h,ans);
            }
            stk.push(i);
        }
        return ans;
    }
};
