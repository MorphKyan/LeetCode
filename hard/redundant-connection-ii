// 并查集
// 注意：不是在添加过程中出现冲突或环了就代表这个是错的，因为有可能同时出现冲突和环，比如[[2,1],[3,1],[4,2],[1,4]]
struct UnionFind{
    vector<int> ancestor;

    // 初始化
    UnionFind(int n){
        ancestor.resize(n);
        for(int i=0;i<n;++i){
            ancestor[i]=i;
        }
    }

    // 找根节点
    int find(int idx){
        return idx==ancestor[idx]? idx:ancestor[idx]=find(ancestor[idx]);
    }

    // 合并 并查集的合并
    void merge(int u,int v){
        ancestor[find(u)]=find(v);
    }
};

class Solution {
public:
    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {
        int nodeCount=edges.size();
        UnionFind uf=UnionFind(nodeCount+1);
        auto parent=vector<int>(nodeCount+1);
        for(int i=1;i<=nodeCount;++i){
            parent[i]=i;
        }
        int conflict=-1; // 冲突
        int cycle=-1; // 环路
        for(int i=0;i<nodeCount;++i){
            auto edge=edges[i];
            int node1=edge[0],node2=edge[1];
            if(parent[node2]!=node2) conflict=i; // 出现冲突
            else{
                parent[node2]=node1;
                if(uf.find(node1)==uf.find(node2)){ // 出现环路
                    cycle=i;
                }
                else{
                    uf.merge(node1,node2); // 合并
                }
            }
        }
        if(conflict<0){ // 无冲突必是环路
            auto redundant=vector<int> {edges[cycle][0],edges[cycle][1]};
            return redundant;
        }
        else{
            auto conflictEdge=edges[conflict]; // 冲突边
            if(cycle>=0){ // 返回产生冲突的两边中，同时产生环的那条边
                auto redundant=vector<int> {parent[conflictEdge[1]],conflictEdge[1]};
                return redundant;
            }
            else{ // 返回冗余边
                auto redundant=vector<int> {conflictEdge[0],conflictEdge[1]};
                return redundant;
            }
        }
    }
};
