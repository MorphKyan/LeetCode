// 归并排序 并计算
class Solution {
public:
    int reversePairsRevursive(vector<int>& nums,int l,int r){
        if(l==r) return 0;
        else{
            int mid=(l+r)>>1;
            int n1=reversePairsRevursive(nums,l,mid);
            int n2=reversePairsRevursive(nums,mid+1,r);
            int ret=n1+n2;

            // 统计下标数量
            int i=l;
            int j=mid+1;
            while(i<=mid){
                while(j<=r&&(long long)nums[i]>2*(long long)nums[j]) ++j;
                ret+=(j-mid-1);
                ++i;
            }

            // 归并排序
            vector<int> sorted(r-l+1);
            int p1=l,p2=mid+1;
            int p=0;
            while(p1<=mid||p2<=r){
                if(p1>mid){
                    sorted[p++]=nums[p2++];
                }else if(p2>r){
                    sorted[p++]=nums[p1++];
                }else{
                    if(nums[p1]<nums[p2]){
                        sorted[p++]=nums[p1++];
                    }else{
                        sorted[p++]=nums[p2++];
                    }
                }
            }

            // 排序好的复制到nums
            for(int i=0;i<sorted.size();++i){
                nums[l+i]=sorted[i];
            }
            return ret;
        }
    }
    int reversePairs(vector<int>& nums) {
        if(nums.size()==0) return 0;
        return reversePairsRevursive(nums,0,nums.size()-1);
    }
};
