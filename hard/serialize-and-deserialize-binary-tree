/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
// DFS遍历，没有加[]，结尾的null也都在
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string ret="";
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* tmp=q.front();q.pop();
            if(tmp!=NULL){
                ret+=to_string(tmp->val)+",";
                q.push(tmp->left);
                q.push(tmp->right);
            }
            else{
                ret+="null,";
            }
        }
        //ret+="]";
        std::cout<<ret;
        return ret;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data=="null,") return NULL;
        vector<string> nodes=split(data);
        TreeNode* root=new TreeNode(stoi(nodes[0]));
        queue<TreeNode*> q;
        q.push(root);
        for(int i=1;i<nodes.size();++i){
            if(nodes[i]!="null"){
                TreeNode* p=new TreeNode(stoi(nodes[i]));
                q.push(p);
                q.front()->left=p;
            }
            ++i;
            if(nodes[i]!="null"){
                TreeNode* p=new TreeNode(stoi(nodes[i]));
                q.push(p);
                q.front()->right=p;
            }
            q.pop();
        }
        return root;
    }

    vector<string> split(string &data){
        int start=0;
        vector<string> res;
        while(1){
            auto end = data.find(',',start);
            if(end==string::npos)break;
            res.push_back(data.substr(start,end-start));
            start=end+1;
        }
        return move(res);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
