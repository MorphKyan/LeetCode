// 记忆化搜索转成动态规划
class Solution {
public:
    int maxCoins(vector<int>& nums) {
        int n=nums.size();
        // 留出前后空间
        vector<vector<int>> dp(n+2,vector<int>(n+2));
        // 带左右边的数组
        vector<int> val(n+2);
        val[0]=val[n+1]=1;
        for(int i=1;i<=n;++i){
            val[i]=nums[i-1];
        }
        // 注意计算顺序
        for(int i=n-1;i>=0;i--){
            for(int j=i+2;j<=n+1;j++){
                for(int k=i+1;k<j;k++){
                    int sum=val[i]*val[k]*val[j];
                    sum+=dp[i][k]+dp[k][j];
                    dp[i][j]=max(dp[i][j],sum);
                }
            }
        }
        return dp[0][n+1];
    }
};
