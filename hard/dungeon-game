// 动态规划要满足无后效性，左上到右下的规划方式不满足，同时考虑到这点最少初始生命和路径上累积和
// 且要让初始生命最少，路径累积和最大（计算初始生命需要用到）
// 改为右下到左上的规划，就只用考虑到达
class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=dungeon.size(),n=dungeon[0].size();
        vector<vector<int>> dp(m,vector<int>(n,INT_MAX));
        dp[m-1][n-1]=1-dungeon[m-1][n-1];
        for(int i=m-1;i>=0;--i){
            for(int j=n-1;j>=0;--j){
                if(j+1<n&&i+1<m) dp[i][j]=min(dp[i+1][j],dp[i][j+1])-dungeon[i][j];
                else if(i+1<m) dp[i][j]=dp[i+1][j]-dungeon[i][j];
                else if(j+1<n) dp[i][j]=dp[i][j+1]-dungeon[i][j];
                if(dp[i][j]<=0) dp[i][j]=1;
            }
        }
        return dp[0][0];
    }
};
