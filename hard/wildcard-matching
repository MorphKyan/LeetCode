// dp 与 regular-expression-matching相似
class Solution {
public:
    bool isMatch(string s, string p) {
        int m=s.size(),n=p.size();
        vector<vector<bool>> dp(m+1,vector<bool>(n+1));
        dp[0][0]=true;

        // dp[0][j]只有p前j个都是*才初始化为true
        for(int i=1;i<=n;++i){
            if(p[i-1]=='*'){
                dp[0][i]=true;
            }else break;
        }
        
        // dp里的序号都对应s/p中的序号-1
        for(int i=1;i<=m;++i){
            for(int j=1;j<=n;++j){
                if(p[j-1]=='?'||s[i-1]==p[j-1]){
                    dp[i][j]=dp[i-1][j-1];
                }
                else if(p[j-1]=='*'){
                    // dp[i-1][j]相当于p串没动，*号继续用
                    dp[i][j]=dp[i][j-1]||dp[i-1][j];
                }
            }
        }
        return dp[m][n];
    }
};
