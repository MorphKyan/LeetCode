// 利用归并排序，过程中就把结果给出了
class Solution {
public:
    vector<int> res;
    vector<int> countSmaller(vector<int>& nums) {
        if(nums.empty()) return {};
        // vec临时组
        vector<pair<int,int>> vec;
        for(int i=0;i<nums.size();++i){
            vec.emplace_back(nums[i],i);
        }

        res=vector<int>(nums.size(),0);
        merge_sort(vec,0,vec.size()-1);
        return res;
    }

    void merge_sort(vector<pair<int,int>>& nums,int left,int right){
        if(left<right){
            int mid=left+((right-left)>>1);
            merge_sort(nums,left,mid);
            merge_sort(nums,mid+1,right);
            merge(nums,left,mid,right);
        }
    }

    void merge(vector<pair<int,int>>& nums,int left,int mid,int right){
        int i=left,j=mid+1;
        int k=left;
        vector<pair<int,int>> sort_nums; // 合并完了放这里
        while(i<=mid&&j<=right){
            if(nums[i].first<=nums[j].first){
            	// 左区比右区小，左边这个i前面排完序以后，j走了多少就是有多少个比i这个位置小的
                // 多层归并所以结果要叠加
                res[nums[i].second]+=j-mid-1;
                sort_nums.push_back(nums[i++]);
            }
            else if(nums[i].first>nums[j].first){
                sort_nums.push_back(nums[j++]);
            }
        }

        // 左边剩下
        while(i<=mid){
        	// 同上这种情况下算；其实也可以在j的那部分算
            res[nums[i].second]+=j-mid-1;
            // 此时前面剩下的数，比后面所有的数都大
            sort_nums.push_back(nums[i++]);
        }

        // 右边剩下
        while(j<=right){
            sort_nums.push_back(nums[j++]);
        }

        for(int m=0,n=left;m<sort_nums.size();++m,++n){
            nums[n]=sort_nums[m];
        }
    }
};
