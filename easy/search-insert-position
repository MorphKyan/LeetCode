class Solution {
public:
    int searchInsert(vector<int>&nums,int target){
        return searchInsert3(nums,target);
    }

    //暴力从头开始找
    int searchInsert1(vector<int>& nums, int target) {
        int size=nums.size();
        int i=0;
        for(;i<size;++i){
            if(nums[i]==target) return i;
            if(nums[i]>target){
                break;
            }
        }
        return i;
    }

    //二分法查找
    int searchInsert2(vector<int>& nums, int target) {
        int left=0,right=nums.size()-1;
        int mid=-1;
        while(left<=right){
            mid=(left+right)/2;
            if(nums[mid]==target) return mid;
            if(nums[mid]<target){
                left=mid+1;
                ++mid;
            }
            else if(nums[mid]>target){
                right=mid-1;
            }
        }
        return mid;
    }

    //减治法
    int searchInsert3(vector<int> &nums, int target) {
        int size = nums.size();
        if (size == 0) {
            return 0;
        }

        int left = 0;
        //因为有可能数组的最后一个元素的位置的下一个是我们要找的，故右边界是len
        int right = size;

        while (left < right) {
            int mid = left + (right - left) / 2;
            //小于target的元素一定不是解，这样写可以防止溢出
            if (nums[mid] < target) {
                //下一轮搜索的区间是[mid + 1, right]
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }
};
