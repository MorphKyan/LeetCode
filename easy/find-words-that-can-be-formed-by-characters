class Solution {
public:
    int countCharacters(vector<string>& words, string chars) {
        int charsCount[26]={0};
        int charsCountBak[26]={0};
        int sum=0;
        for(int i=0;i<chars.size();++i){
            ++charsCount[chars[i]-97];
        }
        for(string word:words){
            memcpy(charsCountBak,charsCount,sizeof(charsCount));
            bool ok=true;
            for(char c:word){
                if(charsCount[c-97]>0){
                    --charsCount[c-97];
                }
                else {
                    ok=false;
                    break;
                }
            }
            memcpy(charsCount,charsCountBak,sizeof(charsCountBak));
            if(ok) sum+=word.size();
        }
        return sum;
    }
};

// void* memcpy(void* destination,const void* source,size_t num);
// 可以拷贝任意类型 三个参数分别为 目的 源 内存大小
// memmove允许目的位置和源位置重叠
// 示例如下:
// int arr[] = {1,2,3,4,5,6,7,8};
// memmove(arr+3,arr+1,sizeof(int)*5);
// for(auto e:arr) cout<<e<<" ";       // 输出 1,2,3,2,3,4,5,6
