// 埃氏筛
class Solution {
public:
    int countPrimes(int n) {
        vector<bool> primes(n,true);
        int ans=0;
        for(int i=2;i<n;++i){
            if(primes[i]){
                ++ans;
                if((long long)i*i<n){ // 防止越界了
                // 从2x开始标记其实是冗余的，应该直接从下x^2开始标记
                // 因为2x 3x这些数一定在x^2之前就被其他数的倍数标记过了
                // 例如2的所有倍数，3的所有倍数等
                    for(int j=i*i;j<n;j+=i){
                        primes[j]=false;
                    }
                }
            }
        }
        return ans;
    }
};

// 线性筛
class Solution {
public:
    int countPrimes(int n) {
        vector<int> primes;
        vector<bool> isPrime(n,true);
        for(int i=2;i<n;++i){
            if(isPrime[i]){
                primes.emplace_back(i);
            }
            // 每个合数只被最小质因数标记
            for(int j=0;j<primes.size()&&i*primes[j]<n;++j){
                isPrime[i*primes[j]]=false;
                if(i%primes[j]==0){
                    break;
                }
            }
        }
        return primes.size();
    }
};
