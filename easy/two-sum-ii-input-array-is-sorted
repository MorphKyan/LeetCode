// 双指针
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int low=0,high=numbers.size()-1;
        while(low<high){
            int sum=numbers[low]+numbers[high];
            if(sum==target) return {low+1,high+1};
            else if(sum<target) ++low;
            else --high;
        }
        return {-1,-1};
    }
};

// 单次循环二分查找
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        for(int i=0;i<numbers.size();++i){
            int left=i+1,right=numbers.size()-1;
            while(left<=right){
                int mid=(left+right)/2;
                if(numbers[mid]==target-numbers[i]) return {i+1,mid+1};
                else if(numbers[mid]<target-numbers[i]) left=mid+1;
                else right=mid-1;
            }
        }
        return {-1,-1};
    }
};
