class Solution {
public:
    bool canMeasureWater(int x, int y, int z) {
        if((x+y)<z) return false;
        if(x==0||y==0) return z==0||x+y==z;
        return z%gcd(x,y)==0;
    }
};

// 别说了，贝祖定理，学就完了

// map和set两种容器的底层结构都是红黑树，所以容器中不会出现相同的元素，因此count()的结果只能为0和1
// 可以以此来判断键值元素是否存在，当然也可以使用find()方法判断键值是否存在。
//find()方法返回值是一个迭代器，成功返回迭代器指向要查找的元素，失败返回的迭代器指向end。count()方法返回值是一个整数
// 1表示有这个元素，0表示没有这个元素。
// emplace 最大的作用是避免产生不必要的临时变量，因为它可以完成 in place 的构 造，举个例子：
/*
struct Foo {
    Foo(int n, double x);
};

std::vector<Foo> v;
v.emplace(someIterator, 42, 3.1416);        // 没有临时变量产生
v.insert(someIterator, Foo(42, 3.1416));    // 需要产生一个临时变量
v.insert(someIterator, {42, 3.1416});       // 需要产生一个临时变量
*/
